{"version":3,"file":"vue-i18n-phrase.umd.js","sources":["../src/phrase/projects.ts","../src/phrase/locales.ts","../src/phrase/files.ts","../src/phrase/setup.ts","../src/index.ts","../src/commands/sync.ts"],"sourcesContent":["import axios from 'axios';\nimport { PhraseProject } from '../types';\n\nexport async function getProject (projectID?: string): Promise<PhraseProject> {\n  const { data: projects }: { data: PhraseProject[] } =\n    await axios.get('https://api.phraseapp.com/api/v2/projects');\n\n  const project = (projectID) ? projects.find((project) => project.id === projectID) : projects[0];\n\n  if (!project) throw new Error('Could not find project from PhraseAPI. If no project was defined as an argument, then there is no project in the selected Phrase Account')\n\n  return project;\n}\n","import axios from 'axios';\nimport { PhraseProject, PhraseLocale } from '../types';\n\nfunction getLastPageFromLink (link: string): number {\n  const regex = /page=([0-9]*)&per_page=100>; rel=last/;\n  const regexMatch = regex.exec(link);\n\n  if (!regexMatch) throw new Error('Could not get pagination info from the PhraseAPI');\n\n  return parseInt(regexMatch[1]);\n}\n\nasync function getPageOfLocales (project: PhraseProject, page: number): Promise<{ data: PhraseLocale[]; lastPage: number }> {\n  const { data, headers } = await axios.get(`https://api.phraseapp.com/api/v2/projects/${project.id}/locales`, {\n    params: {\n      page,\n      per_page: 100, // eslint-disable-line @typescript-eslint/camelcase\n    },\n  });\n  return {\n    data,\n    lastPage: getLastPageFromLink(headers.link),\n  };\n}\n\nexport async function getLocales (project: PhraseProject): Promise<PhraseLocale[]> {\n  const locales: PhraseLocale[] = [];\n\n  const { data: firstData, lastPage } = await getPageOfLocales(project, 1);\n  locales.push(...firstData);\n\n  for (let page = 2; page <= lastPage; page++) {\n    const { data } = await getPageOfLocales(project, page);\n    locales.push(...data);\n  }\n\n  return locales;\n}\n\nexport async function getLocale (project: PhraseProject, localeCode: string | boolean = false, locales?: PhraseLocale[]): Promise<PhraseLocale> {\n  if (!locales) {\n    locales = await getLocales(project);\n  }\n\n  let locale: PhraseLocale | undefined;\n  if (typeof localeCode === 'string') {\n    locale = locales.find(locale => locale.code === localeCode);\n\n    // Last ditch effort to find locale\n    if (!locale) {\n      locale = locales.find(locale => {\n        const language = locale.code.split('-')[0];\n        return language === localeCode;\n      });\n    }\n  } else {\n    locale = locales.find(locale => locale.default);\n  }\n\n  if (!locale) throw new Error('Locale not found, is the argument makeTranslation set correctly?');\n\n  return locale;\n}\n\n\n","import axios from 'axios';\nimport {\n  PhraseLocale,\n  PhraseProject,\n  PhraseTranslation,\n  PhraseUpload,\n} from '../types';\nimport {\n  I18NLanguage,\n  I18NItem,\n} from 'vue-i18n-extract';\nimport FormData from 'form-data';\nimport fs from 'fs';\n\nexport async function confirmUploadSuccess (\n  project: PhraseProject,\n  upload: PhraseUpload,\n): Promise<PhraseUpload> {\n  return new Promise((resolve, reject) => {\n    let count = 1;\n    function viewUploadDetails (): void {\n      if (count < 13) {\n        setTimeout(async () => {\n          const { data: uploadedFile }: { data: PhraseUpload } =\n          await axios.get(`https://api.phraseapp.com/api/v2/projects/${project.id}/uploads/${upload.id}`);\n          if (uploadedFile.state === 'success') {\n            resolve(uploadedFile);\n          } else {\n            count++;\n            viewUploadDetails();\n          }\n        }, 500);\n      } else {\n        reject(\n          'It has taken over a minute to confirm the upload was a success. ' +\n          'Please refer to your Phrase Dashboard Web UI Uploaded Files section for more information.',\n        );\n      }\n    }\n    viewUploadDetails();\n  });\n}\n\nexport async function uploadLanguageFile (\n  filePath: string,\n  project: PhraseProject,\n  locale: PhraseLocale,\n  tags?: string,\n  makeTranslation: boolean | string = false,\n): Promise<PhraseUpload> {\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    fs.createReadStream(filePath),\n    `${locale.code}-${(tags || '').split(',').join('-')}.json`,\n  );\n  formData.append('file_format', `simple_json`);\n  formData.append('locale_id', locale.id);\n  if (tags) {\n    formData.append('tags', tags);\n  }\n  formData.append('update_translations', `${!!makeTranslation}`);\n  formData.append('skip_upload_tags', 'true');\n\n  const { data: uploadedFile }: { data: PhraseUpload } = await axios.post(\n    `https://api.phraseapp.com/api/v2/projects/${project.id}/uploads`,\n    formData,\n    {\n      headers: formData.getHeaders(),\n    },\n  );\n\n  return confirmUploadSuccess(project, uploadedFile);\n}\n\n\n\nexport async function downloadAllTranslationsToI18NLanguage (\n  locales: PhraseLocale[],\n  project: PhraseProject,\n  tags?: string,\n): Promise<I18NLanguage> {\n  const i18nLanguage: I18NLanguage = {};\n\n  for (const locale of locales) {\n    const { data }: { data: PhraseTranslation[] } = await axios.get(\n      `https://api.phraseapp.com/api/v2/projects/${project.id}/locales/${\n        locale.id\n      }/download`,\n      { params: { file_format: 'simple_json', tags } }, // eslint-disable-line @typescript-eslint/camelcase\n    );\n\n    i18nLanguage[locale.code] = Object.keys(data).map((path) => {\n      return {\n        language: locale.code,\n        path,\n      };\n    }) as I18NItem[];\n  }\n\n  return i18nLanguage;\n}\n","import axios, { AxiosError } from 'axios';\n\nexport function setupAxios (accessToken: string): void {\n  axios.defaults.headers.common.Authorization = `token ${accessToken}`;\n  axios.interceptors.response.use(\n    (response) => response,\n    (error: AxiosError) => {\n      if (error.response && error.response.status === 429) {\n        throw new Error('Too many requests sent to the PhraseAPI, please wait 5 minutes and try again.');\n      }\n\n      throw error;\n    },\n  );\n}\n","import { sync } from './commands/index.js';\n\nexport * from './types';\nexport * from './phrase'\n\nexport default {\n  sync,\n};\n","import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport { I18NItem, parseVueFiles, extractI18NReport, writeReportToFile } from 'vue-i18n-extract';\nimport {\n  getLocale,\n  getProject,\n  setupAxios,\n  uploadLanguageFile,\n  downloadAllTranslationsToI18NLanguage,\n  getLocales,\n} from '../phrase';\nimport {\n  SyncCommandOptions,\n  PhraseLocale,\n} from '../types';\n\nfunction parsedVueFilesToJSON (\n  parsedVueFiles: I18NItem[],\n  makeTranslation: boolean | string = false,\n): Record<string, string> {\n  return parsedVueFiles.reduce((accumulator, i18nItem) => {\n    if (!!makeTranslation) {\n      accumulator[i18nItem.path] = i18nItem.path;\n    } else {\n      accumulator[i18nItem.path] = '';\n    }\n    return accumulator;\n  }, {});\n}\n\nasync function makeOutputDir (outputDir: string): Promise<void> {\n  return fs.mkdir(\n    path.resolve(process.cwd(), outputDir),\n    { recursive: true },\n    (err) => { if (err) { throw err; } },\n  );\n}\n\nfunction writeLanguageJSON (languageJSON: object, outputDir: string, locale: PhraseLocale): string {\n  const filePath = path.resolve(process.cwd(), outputDir, `${locale.code}.json`);\n  fs.writeFile(\n    filePath,\n    JSON.stringify(languageJSON),\n    (err) => { if (err) { throw err; } },\n  );\n  return filePath;\n}\n\nexport async function sync ({\n  vueFiles,\n  accessToken,\n  projectID,\n  tags,\n  makeTranslation,\n  skipReport = false,\n  dryRun = false,\n  outputDir = './phrase-reports',\n}: SyncCommandOptions): Promise<void> {\n  const parsedVueFiles = parseVueFiles(vueFiles);\n  const languageJSON = parsedVueFilesToJSON(parsedVueFiles, makeTranslation);\n\n  console.log(chalk.green(`\\nFound ${Object.keys(languageJSON).length} unique keys in your Vue.js files`));\n\n  setupAxios(accessToken);\n\n  console.log(chalk.bold(`\\nGetting Phrase project and locale...`));\n\n  const selectedProject = await getProject(projectID);\n  const locales = await getLocales(selectedProject);\n  const selectedLocale = await getLocale(selectedProject, makeTranslation, locales);\n\n  console.log(`Using project: ${chalk.green(selectedProject.name)}`);\n  console.log(`Using locale: ${chalk.green(selectedLocale.code)}`);\n\n  await makeOutputDir(outputDir);\n  const filePath = writeLanguageJSON(languageJSON, outputDir, selectedLocale);\n\n  console.log(`\\nUploading keys to Phrase for the ${chalk.bold(selectedLocale.name)} locale.`);\n  if (tags) { console.log(`With the tags ${chalk.bold(tags)}`); }\n  if (!!makeTranslation) { console.log(`With the keys set as the translation`); }\n\n  if (!dryRun) {\n    const uploadedFile =\n      await uploadLanguageFile(filePath, selectedProject, selectedLocale, tags, makeTranslation);\n    console.log(`\\nKeys successfully added!`);\n    console.log(`\\nUpload File Summary:`);\n    console.log(`File Name: ${uploadedFile.filename}`);\n    console.log(`Keys Created: ${uploadedFile.summary.translation_keys_created}`);\n    console.log(`Keys Updated: ${uploadedFile.summary.translations_updated}`);\n    console.log(`Keys Unmentioned: ${uploadedFile.summary.translation_keys_unmentioned}`);\n    console.log(`Key Translations Created: ${uploadedFile.summary.translations_created}`);\n    console.log(`Key Translations Updated: ${uploadedFile.summary.translations_updated}`);\n    console.log(`Tags Created: ${uploadedFile.summary.tags_created}`);\n  } else {\n    console.log(chalk.bgRed.whiteBright(`\\nPsyke! it's a dry run, nothing is changed in Phrase!`));\n  }\n\n  if (!skipReport) {\n    console.log(chalk.bold(`\\nGenerating a full report...`));\n    if (tags) { console.log(`Getting all translations with the tags ${chalk.bold(tags)}`); }\n\n    const i18nLanguage = await downloadAllTranslationsToI18NLanguage(locales, selectedProject, tags);\n    const report = extractI18NReport(parsedVueFiles, i18nLanguage);\n    await writeReportToFile(report, `${outputDir}/report.json`);\n  }\n\n  console.log(chalk.green(`\\nComplete! you can view you language file and report at ${outputDir}\\n`));\n}\n"],"names":["getProject","projectID","data","projects","axios","get","project","find","id","Error","getLastPageFromLink","link","regexMatch","exec","parseInt","async","getPageOfLocales","page","headers","params","per_page","lastPage","getLocales","locales","firstData","push","getLocale","localeCode","locale","code","split","default","confirmUploadSuccess","upload","Promise","resolve","reject","count","viewUploadDetails","setTimeout","uploadedFile","state","uploadLanguageFile","filePath","tags","makeTranslation","formData","FormData","append","fs","createReadStream","join","post","getHeaders","downloadAllTranslationsToI18NLanguage","i18nLanguage","file_format","Object","keys","map","path","language","setupAxios","accessToken","defaults","common","Authorization","interceptors","response","use","error","status","sync","vueFiles","skipReport","dryRun","outputDir","parsedVueFiles","parseVueFiles","languageJSON","reduce","accumulator","i18nItem","parsedVueFilesToJSON","console","log","chalk","green","length","bold","selectedProject","selectedLocale","name","mkdir","process","cwd","recursive","err","makeOutputDir","writeFile","JSON","stringify","writeLanguageJSON","bgRed","whiteBright","filename","summary","translation_keys_created","translations_updated","translation_keys_unmentioned","translations_created","tags_created","report","extractI18NReport","writeReportToFile"],"mappings":"4bAGsBA,EAAYC,GAChC,IAAQC,KAAMC,SACNC,EAAMC,IAAI,6CAEZC,EAAWL,EAAaE,EAASI,KAAMD,GAAYA,EAAQE,KAAOP,GAAaE,EAAS,GAE9F,IAAKG,EAAS,UAAUG,MAAM,4IAE9B,OAAOH,ECRT,SAASI,EAAqBC,GAC5B,IACMC,EADQ,wCACWC,KAAKF,GAE9B,IAAKC,EAAY,UAAUH,MAAM,oDAEjC,OAAOK,SAASF,EAAW,IAG7BG,eAAeC,EAAkBV,EAAwBW,GACvD,IAAMf,KAAEA,EAAFgB,QAAQA,SAAkBd,EAAMC,iDAAiDC,EAAQE,cAAc,CAC3GW,OAAQ,CACNF,KAAAA,EACAG,SAAU,OAGd,MAAO,CACLlB,KAAAA,EACAmB,SAAUX,EAAoBQ,EAAQP,sBAIpBW,EAAYhB,GAChC,IAAMiB,EAA0B,IAExBrB,KAAMsB,EAARH,SAAmBA,SAAmBL,EAAiBV,EAAS,GACtEiB,EAAQE,QAAQD,GAEhB,IAAK,IAAIP,EAAO,EAAGA,GAAQI,EAAUJ,IAAQ,CAC3C,IAAMf,KAAEA,SAAec,EAAiBV,EAASW,GACjDM,EAAQE,QAAQvB,GAGlB,OAAOqB,iBAGaG,EAAWpB,EAAwBqB,EAAsCJ,GAK7F,IAAIK,EAeJ,YApBuDD,IAAAA,GAA+B,GACjFJ,IACHA,QAAgBD,EAAWhB,IAIH,iBAAfqB,GACTC,EAASL,EAAQhB,KAAKqB,GAAUA,EAAOC,OAASF,MAI9CC,EAASL,EAAQhB,KAAKqB,GACHA,EAAOC,KAAKC,MAAM,KAAK,KACpBH,IAIxBC,EAASL,EAAQhB,KAAKqB,GAAUA,EAAOG,UAGpCH,EAAQ,UAAUnB,MAAM,oEAE7B,OAAOmB,iBC/CaI,EACpB1B,EACA2B,GAEA,WAAWC,QAAQ,CAACC,EAASC,KAC3B,IAAIC,EAAQ,GACZ,SAASC,IACHD,EAAQ,GACVE,WAAWxB,UACT,IAAQb,KAAMsC,SACRpC,EAAMC,iDAAiDC,EAAQE,eAAcyB,EAAOzB,IAC/D,YAAvBgC,EAAaC,MACfN,EAAQK,IAERH,IACAC,MAED,KAEHF,EACE,6JAKNE,oBAIkBI,EACpBC,EACArC,EACAsB,EACAgB,EACAC,YAAAA,IAAAA,GAAoC,GAEpC,IAAMC,EAAW,IAAIC,EAErBD,EAASE,OACP,OACAC,EAAGC,iBAAiBP,GACjBf,EAAOC,UAASe,GAAQ,IAAId,MAAM,KAAKqB,KAAK,cAEjDL,EAASE,OAAO,6BAChBF,EAASE,OAAO,YAAapB,EAAOpB,IAChCoC,GACFE,EAASE,OAAO,OAAQJ,GAE1BE,EAASE,OAAO,2BAA4BH,GAC5CC,EAASE,OAAO,mBAAoB,QAEpC,IAAQ9C,KAAMsC,SAA+CpC,EAAMgD,kDACpB9C,EAAQE,cACrDsC,EACA,CACE5B,QAAS4B,EAASO,eAItB,OAAOrB,EAAqB1B,EAASkC,kBAKjBc,EACpB/B,EACAjB,EACAsC,GAEA,IAAMW,EAA6B,oBAExB3B,GACT,IAAM1B,KAAEA,SAA8CE,EAAMC,iDACbC,EAAQE,eACnDoB,EAAOpB,eAET,CAAEW,OAAQ,CAAEqC,YAAa,cAAeZ,KAAAA,KAG1CW,EAAa3B,EAAOC,MAAQ4B,OAAOC,KAAKxD,GAAMyD,IAAKC,IAC1C,CACLC,SAAUjC,EAAOC,KACjB+B,KAAAA,MAXN,IAAK,IAAMhC,KAAUL,UAAVK,GAgBX,OAAO2B,WCnGOO,EAAYC,GAC1B3D,EAAM4D,SAAS9C,QAAQ+C,OAAOC,uBAAyBH,EACvD3D,EAAM+D,aAAaC,SAASC,IACzBD,GAAaA,EACbE,IACC,GAAIA,EAAMF,UAAsC,MAA1BE,EAAMF,SAASG,OACnC,UAAU9D,MAAM,iFAGlB,MAAM6D,yVCNG,CACbE,2BC2C0BC,SAC1BA,EAD0BV,YAE1BA,EAF0B9D,UAG1BA,EAH0B2C,KAI1BA,EAJ0BC,gBAK1BA,EAL0B6B,WAM1BA,GAAa,EANaC,OAO1BA,GAAS,EAPiBC,UAQ1BA,EAAY,sBAENC,EAAiBC,gBAAcL,GAC/BM,EA3CR,SACEF,EACAhC,GAEA,gBAFAA,IAAAA,GAAoC,GAE7BgC,EAAeG,OAAO,CAACC,EAAaC,KAEvCD,EAAYC,EAAStB,MADjBf,EACyBqC,EAAStB,KAET,GAExBqB,GACN,IAgCkBE,CAAqBN,EAAgBhC,GAE1DuC,QAAQC,IAAIC,EAAMC,iBAAiB9B,OAAOC,KAAKqB,GAAcS,6CAE7D1B,EAAWC,GAEXqB,QAAQC,IAAIC,EAAMG,gDAElB,IAAMC,QAAwB1F,EAAWC,GACnCsB,QAAgBD,EAAWoE,GAC3BC,QAAuBjE,EAAUgE,EAAiB7C,EAAiBtB,GAEzE6D,QAAQC,sBAAsBC,EAAMC,MAAMG,EAAgBE,OAC1DR,QAAQC,qBAAqBC,EAAMC,MAAMI,EAAe9D,aA1C1Dd,eAA8B6D,GAC5B,OAAO3B,EAAG4C,MACRjC,EAAKzB,QAAQ2D,QAAQC,MAAOnB,GAC5B,CAAEoB,WAAW,GACZC,IAAU,GAAIA,EAAO,MAAMA,IAwCxBC,CAActB,GACpB,IAAMjC,EArCR,SAA4BoC,EAAsBH,EAAmBhD,GACnE,IAAMe,EAAWiB,EAAKzB,QAAQ2D,QAAQC,MAAOnB,EAAchD,EAAOC,cAMlE,OALAoB,EAAGkD,UACDxD,EACAyD,KAAKC,UAAUtB,GACdkB,IAAU,GAAIA,EAAO,MAAMA,IAEvBtD,EA8BU2D,CAAkBvB,EAAcH,EAAWe,GAM5D,GAJAP,QAAQC,0CAA0CC,EAAMG,KAAKE,EAAeC,kBACxEhD,GAAQwC,QAAQC,qBAAqBC,EAAMG,KAAK7C,IAC9CC,GAAmBuC,QAAQC,4CAE5BV,EAaHS,QAAQC,IAAIC,EAAMiB,MAAMC,2EAbb,CACX,IAAMhE,QACEE,EAAmBC,EAAU+C,EAAiBC,EAAgB/C,EAAMC,GAC5EuC,QAAQC,kCACRD,QAAQC,8BACRD,QAAQC,kBAAkB7C,EAAaiE,UACvCrB,QAAQC,qBAAqB7C,EAAakE,QAAQC,0BAClDvB,QAAQC,qBAAqB7C,EAAakE,QAAQE,sBAClDxB,QAAQC,yBAAyB7C,EAAakE,QAAQG,8BACtDzB,QAAQC,iCAAiC7C,EAAakE,QAAQI,sBAC9D1B,QAAQC,iCAAiC7C,EAAakE,QAAQE,sBAC9DxB,QAAQC,qBAAqB7C,EAAakE,QAAQK,cAKpD,IAAKrC,EAAY,CACfU,QAAQC,IAAIC,EAAMG,uCACd7C,GAAQwC,QAAQC,8CAA8CC,EAAMG,KAAK7C,IAE7E,IAAMW,QAAqBD,EAAsC/B,EAASmE,EAAiB9C,GACrFoE,EAASC,oBAAkBpC,EAAgBtB,SAC3C2D,oBAAkBF,EAAWpC,kBAGrCQ,QAAQC,IAAIC,EAAMC,kEAAkEX"}