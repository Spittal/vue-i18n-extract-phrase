{"version":3,"file":"vue-i18n-phrase.umd.js","sources":["../src/phrase/locales.ts","../src/index.ts","../src/commands/sync.ts","../src/phrase/setup.ts","../src/phrase/projects.ts","../src/phrase/files.ts"],"sourcesContent":["import axios from 'axios';\nimport { PhraseProject, PhraseLocale } from '../types';\n\nfunction getLastPageFromLink (link: string): number {\n  const regex = /page=([0-9]*)&per_page=100>; rel=last/;\n  const regexMatch = regex.exec(link);\n\n  if (!regexMatch) throw new Error('Could not get pagination info from the PhraseAPI');\n\n  return parseInt(regexMatch[1]);\n}\n\nasync function getPageOfLocales (project: PhraseProject, page: number): Promise<{ data: PhraseLocale[]; lastPage: number }> {\n  const { data, headers } = await axios.get(`https://api.phraseapp.com/api/v2/projects/${project.id}/locales`, {\n    params: {\n      page,\n      per_page: 100, // eslint-disable-line @typescript-eslint/camelcase\n    },\n  });\n  return {\n    data,\n    lastPage: getLastPageFromLink(headers.link),\n  };\n}\n\nexport async function getLocales (project: PhraseProject): Promise<PhraseLocale[]> {\n  const locales: PhraseLocale[] = [];\n\n  const { data: firstData, lastPage } = await getPageOfLocales(project, 1);\n  locales.push(...firstData);\n\n  for (let page = 2; page <= lastPage; page++) {\n    const { data } = await getPageOfLocales(project, page);\n    locales.push(...data);\n  }\n\n  return locales;\n}\n\nexport async function getLocale (project: PhraseProject, localeCode: string | boolean = false, locales?: PhraseLocale[]): Promise<PhraseLocale> {\n  if (!locales) {\n    locales = await getLocales(project);\n  }\n\n  let locale: PhraseLocale | undefined;\n  if (typeof localeCode === 'string') {\n    locale = locales.find(locale => locale.code === localeCode);\n\n    // Last ditch effort to find locale\n    if (!locale) {\n      locale = locales.find(locale => {\n        const language = locale.code.split('-')[0];\n        return language === localeCode;\n      });\n    }\n  } else {\n    locale = locales.find(locale => locale.default);\n  }\n\n  if (!locale) throw new Error('Locale not found, is the argument makeTranslation set correctly?');\n\n  return locale;\n}\n\n\n","import { sync } from './commands/index.js';\n\nexport default {\n  sync,\n};\n","import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport VueI18NExtract from 'vue-i18n-extract';\nimport { I18NItem } from 'vue-i18n-extract/dist-types/library/models';\nimport {\n  getLocale,\n  getProject,\n  setupAxios,\n  uploadLanguageFile,\n  downloadAllTranslationsToI18NLanguage,\n  getLocales,\n} from '../phrase';\nimport {\n  SyncCommandOptions,\n  PhraseLocale,\n} from '../types';\n\nfunction parsedVueFilesToJSON (\n  parsedVueFiles: I18NItem[],\n  makeTranslation: boolean | string = false,\n): Record<string, string> {\n  return parsedVueFiles.reduce((accumulator, i18nItem) => {\n    if (!!makeTranslation) {\n      accumulator[i18nItem.path] = i18nItem.path;\n    } else {\n      accumulator[i18nItem.path] = '';\n    }\n    return accumulator;\n  }, {});\n}\n\nasync function makeOutputDir (outputDir: string): Promise<void> {\n  return fs.mkdir(\n    path.resolve(process.cwd(), outputDir),\n    { recursive: true },\n    (err) => { if (err) { throw err; } },\n  );\n}\n\nfunction writeLanguageJSON (languageJSON: object, outputDir: string, locale: PhraseLocale): string {\n  const filePath = path.resolve(process.cwd(), outputDir, `${locale.code}.json`);\n  fs.writeFile(\n    filePath,\n    JSON.stringify(languageJSON),\n    (err) => { if (err) { throw err; } },\n  );\n  return filePath;\n}\n\nexport async function sync ({\n  vueFiles,\n  accessToken,\n  projectID,\n  tags,\n  makeTranslation,\n  skipReport = false,\n  dryRun = false,\n  outputDir = './phrase-reports',\n}: SyncCommandOptions): Promise<void> {\n  const parsedVueFiles = VueI18NExtract.parseVueFiles(vueFiles);\n  const languageJSON = parsedVueFilesToJSON(parsedVueFiles, makeTranslation);\n\n  console.log(chalk.green(`\\nFound ${Object.keys(languageJSON).length} unique keys in your Vue.js files`));\n\n  setupAxios(accessToken);\n\n  console.log(chalk.bold(`\\nGetting Phrase project and locale...`));\n\n  const selectedProject = await getProject(projectID);\n  const locales = await getLocales(selectedProject);\n  const selectedLocale = await getLocale(selectedProject, makeTranslation, locales);\n\n  console.log(`Using project: ${chalk.green(selectedProject.name)}`);\n  console.log(`Using locale: ${chalk.green(selectedLocale.code)}`);\n\n  await makeOutputDir(outputDir);\n  const filePath = writeLanguageJSON(languageJSON, outputDir, selectedLocale);\n\n  console.log(`\\nUploading keys to Phrase for the ${chalk.bold(selectedLocale.name)} locale.`);\n  if (tags) { console.log(`With the tags ${chalk.bold(tags)}`); }\n  if (!!makeTranslation) { console.log(`With the keys set as the translation`); }\n\n  if (!dryRun) {\n    const uploadedFile =\n      await uploadLanguageFile(filePath, selectedProject, selectedLocale, tags, makeTranslation);\n    console.log(`\\nKeys successfully added!`);\n    console.log(`\\nUpload File Summary:`);\n    console.log(`File Name: ${uploadedFile.filename}`);\n    console.log(`Keys Created: ${uploadedFile.summary.translation_keys_created}`);\n    console.log(`Keys Updated: ${uploadedFile.summary.translations_updated}`);\n    console.log(`Keys Unmentioned: ${uploadedFile.summary.translation_keys_unmentioned}`);\n    console.log(`Key Translations Created: ${uploadedFile.summary.translations_created}`);\n    console.log(`Key Translations Updated: ${uploadedFile.summary.translations_updated}`);\n    console.log(`Tags Created: ${uploadedFile.summary.tags_created}`);\n  } else {\n    console.log(chalk.bgRed.whiteBright(`\\nPsyke! it's a dry run, nothing is changed in Phrase!`));\n  }\n\n  if (!skipReport) {\n    console.log(chalk.bold(`\\nGenerating a full report...`));\n    if (tags) { console.log(`Getting all translations with the tags ${chalk.bold(tags)}`); }\n\n    const i18nLanguage = await downloadAllTranslationsToI18NLanguage(locales, selectedProject, tags);\n    const report = VueI18NExtract.extractI18NReport(parsedVueFiles, i18nLanguage);\n    await VueI18NExtract.writeReportToFile(report, `${outputDir}/report.json`);\n  }\n\n  console.log(chalk.green(`\\nComplete! you can view you language file and report at ${outputDir}\\n`));\n}\n","import axios, { AxiosError } from 'axios';\n\nexport function setupAxios (accessToken: string): void {\n  axios.defaults.headers.common.Authorization = `token ${accessToken}`;\n  axios.interceptors.response.use(\n    (response) => response,\n    (error: AxiosError) => {\n      if (error.response && error.response.status === 429) {\n        throw new Error('Too many requests sent to the PhraseAPI, please wait 5 minutes and try again.');\n      }\n\n      throw error;\n    },\n  );\n}\n","import axios from 'axios';\nimport { PhraseProject } from '../types';\n\nexport async function getProject (projectID?: string): Promise<PhraseProject> {\n  const { data: projects }: { data: PhraseProject[] } =\n    await axios.get('https://api.phraseapp.com/api/v2/projects');\n\n  const project = (projectID) ? projects.find((project) => project.id === projectID) : projects[0];\n\n  if (!project) throw new Error('Could not find project from PhraseAPI. If no project was defined as an argument, then there is no project in the selected Phrase Account')\n\n  return project;\n}\n","import axios from 'axios';\nimport {\n  PhraseLocale,\n  PhraseProject,\n  PhraseTranslation,\n  PhraseUpload,\n} from '../types';\nimport {\n  I18NLanguage,\n  I18NItem,\n} from 'vue-i18n-extract/dist-types/library/models';\nimport FormData from 'form-data';\nimport fs from 'fs';\n\nexport async function confirmUploadSuccess (\n  project: PhraseProject,\n  upload: PhraseUpload,\n): Promise<PhraseUpload> {\n  return new Promise((resolve, reject) => {\n    let count = 1;\n    function viewUploadDetails (): void {\n      if (count < 13) {\n        setTimeout(async () => {\n          const { data: uploadedFile }: { data: PhraseUpload } =\n          await axios.get(`https://api.phraseapp.com/api/v2/projects/${project.id}/uploads/${upload.id}`);\n          if (uploadedFile.state === 'success') {\n            resolve(uploadedFile);\n          } else {\n            count++;\n            viewUploadDetails();\n          }\n        }, 500);\n      } else {\n        reject(\n          'It has taken over a minute to confirm the upload was a success. ' +\n          'Please refer to your Phrase Dashboard Web UI Uploaded Files section for more information.',\n        );\n      }\n    }\n    viewUploadDetails();\n  });\n}\n\nexport async function uploadLanguageFile (\n  filePath: string,\n  project: PhraseProject,\n  locale: PhraseLocale,\n  tags?: string,\n  makeTranslation: boolean | string = false,\n): Promise<PhraseUpload> {\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    fs.createReadStream(filePath),\n    `${locale.code}-${(tags || '').split(',').join('-')}.json`,\n  );\n  formData.append('file_format', `simple_json`);\n  formData.append('locale_id', locale.id);\n  if (tags) {\n    formData.append('tags', tags);\n  }\n  formData.append('update_translations', `${!!makeTranslation}`);\n  formData.append('skip_upload_tags', 'true');\n\n  const { data: uploadedFile }: { data: PhraseUpload } = await axios.post(\n    `https://api.phraseapp.com/api/v2/projects/${project.id}/uploads`,\n    formData,\n    {\n      headers: formData.getHeaders(),\n    },\n  );\n\n  return confirmUploadSuccess(project, uploadedFile);\n}\n\n\n\nexport async function downloadAllTranslationsToI18NLanguage (\n  locales: PhraseLocale[],\n  project: PhraseProject,\n  tags?: string,\n): Promise<I18NLanguage> {\n  const i18nLanguage: I18NLanguage = {};\n\n  for (const locale of locales) {\n    const { data }: { data: PhraseTranslation[] } = await axios.get(\n      `https://api.phraseapp.com/api/v2/projects/${project.id}/locales/${\n        locale.id\n      }/download`,\n      { params: { file_format: 'simple_json', tags } }, // eslint-disable-line @typescript-eslint/camelcase\n    );\n\n    i18nLanguage[locale.code] = Object.keys(data).map((path) => {\n      return {\n        language: locale.code,\n        path,\n      };\n    }) as I18NItem[];\n  }\n\n  return i18nLanguage;\n}\n"],"names":["getLastPageFromLink","link","regexMatch","exec","Error","parseInt","async","getPageOfLocales","project","page","data","headers","axios","get","id","params","per_page","lastPage","getLocales","locales","firstData","push","sync","vueFiles","accessToken","projectID","tags","makeTranslation","skipReport","dryRun","outputDir","parsedVueFiles","VueI18NExtract","parseVueFiles","languageJSON","reduce","accumulator","i18nItem","path","parsedVueFilesToJSON","console","log","chalk","green","Object","keys","length","defaults","common","Authorization","interceptors","response","use","error","status","setupAxios","bold","selectedProject","projects","find","getProject","selectedLocale","localeCode","locale","code","split","default","getLocale","name","fs","mkdir","resolve","process","cwd","recursive","err","makeOutputDir","filePath","writeFile","JSON","stringify","writeLanguageJSON","bgRed","whiteBright","uploadedFile","formData","FormData","append","createReadStream","join","post","getHeaders","upload","Promise","reject","count","viewUploadDetails","setTimeout","state","confirmUploadSuccess","uploadLanguageFile","filename","summary","translation_keys_created","translations_updated","translation_keys_unmentioned","translations_created","tags_created","i18nLanguage","file_format","map","language","downloadAllTranslationsToI18NLanguage","report","extractI18NReport","writeReportToFile"],"mappings":"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"}