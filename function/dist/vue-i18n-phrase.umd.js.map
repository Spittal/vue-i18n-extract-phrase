{"version":3,"file":"vue-i18n-phrase.umd.js","sources":["../../src/phrase/locales.ts","../src/index.ts","../../src/phrase/setup.ts","../../src/phrase/projects.ts"],"sourcesContent":["import axios from 'axios';\nimport { PhraseProject, PhraseLocale } from '../types';\n\nfunction getLastPageFromLink (link: string): number {\n  const regex = /page=([0-9]*)&per_page=100>; rel=last/;\n  const regexMatch = regex.exec(link);\n\n  if (!regexMatch) throw new Error('Could not get pagination info from the PhraseAPI');\n\n  return parseInt(regexMatch[1]);\n}\n\nasync function getPageOfLocales (project: PhraseProject, page: number): Promise<{ data: PhraseLocale[]; lastPage: number }> {\n  const { data, headers } = await axios.get(`https://api.phraseapp.com/api/v2/projects/${project.id}/locales`, {\n    params: {\n      page,\n      per_page: 100, // eslint-disable-line @typescript-eslint/camelcase\n    },\n  });\n  return {\n    data,\n    lastPage: getLastPageFromLink(headers.link),\n  };\n}\n\nexport async function getLocales (project: PhraseProject): Promise<PhraseLocale[]> {\n  const locales: PhraseLocale[] = [];\n\n  const { data: firstData, lastPage } = await getPageOfLocales(project, 1);\n  locales.push(...firstData);\n\n  for (let page = 2; page <= lastPage; page++) {\n    const { data } = await getPageOfLocales(project, page);\n    locales.push(...data);\n  }\n\n  return locales;\n}\n\nexport async function getLocale (project: PhraseProject, localeCode: string | boolean = false, locales?: PhraseLocale[]): Promise<PhraseLocale> {\n  if (!locales) {\n    locales = await getLocales(project);\n  }\n\n  let locale: PhraseLocale | undefined;\n  if (typeof localeCode === 'string') {\n    locale = locales.find(locale => locale.code === localeCode);\n\n    // Last ditch effort to find locale\n    if (!locale) {\n      locale = locales.find(locale => {\n        const language = locale.code.split('-')[0];\n        return language === localeCode;\n      });\n    }\n  } else {\n    locale = locales.find(locale => locale.default);\n  }\n\n  if (!locale) throw new Error('Locale not found, is the argument makeTranslation set correctly?');\n\n  return locale;\n}\n\n\n","import express from 'express';\nimport axios from 'axios';\nimport cors from 'cors';\nimport { getLocale, getProject, setupAxios } from '../../src';\nconst corsHandler = cors({ origin: '*' });\n\nconst app = express();\napp.use(corsHandler);\n\napp.get('/getLocaleFromPhrase', async (req, res) => {\n  if (process.env.PHRASE_ACCESS_TOKEN) {\n    setupAxios(process.env.PHRASE_ACCESS_TOKEN);\n  } else {\n    const error = new Error('No PHRASE_ACCESS_TOKEN environment variable defined.');\n    res\n      .status(500)\n      .send(JSON.stringify({ error: error.toString() }));\n    throw error;\n  }\n\n  const selectedProject = await getProject(process.env.PHRASE_PROJECT_ID);\n  const locale = await getLocale(selectedProject, req.query.locale);\n\n  try {\n    const { data } = await axios.get(`https://api.phraseapp.com/api/v2/projects/${selectedProject.id}/locales/${locale.id}/download`, {\n      params: {\n        file_format: 'simple_json', // eslint-disable-line @typescript-eslint/camelcase\n        tags: req.query.tags\n      }\n    });\n\n    res\n      .set('Content-Type', 'application/json')\n      .set('Cache-Control', 'max-age=3600')\n      .send(JSON.stringify(data));\n  } catch (e) {\n    res\n      .status(e.response.status || 500)\n      .send(JSON.stringify(e.response.data));\n    throw e;\n  }\n});\n\napp.listen(process.env.PORT || 8080, () => console.log('Phrase Locale Server Started'));\n","import axios, { AxiosError } from 'axios';\n\nexport function setupAxios (accessToken: string): void {\n  axios.defaults.headers.common.Authorization = `token ${accessToken}`;\n  axios.interceptors.response.use(\n    (response) => response,\n    (error: AxiosError) => {\n      if (error.response && error.response.status === 429) {\n        throw new Error('Too many requests sent to the PhraseAPI, please wait 5 minutes and try again.');\n      }\n\n      throw error;\n    },\n  );\n}\n","import axios from 'axios';\nimport { PhraseProject } from '../types';\n\nexport async function getProject (projectID?: string): Promise<PhraseProject> {\n  const { data: projects }: { data: PhraseProject[] } =\n    await axios.get('https://api.phraseapp.com/api/v2/projects');\n\n  const project = (projectID) ? projects.find((project) => project.id === projectID) : projects[0];\n\n  if (!project) throw new Error('Could not find project from PhraseAPI. If no project was defined as an argument, then there is no project in the selected Phrase Account')\n\n  return project;\n}\n"],"names":["getLastPageFromLink","link","regexMatch","exec","Error","parseInt","async","getPageOfLocales","project","page","data","headers","axios","get","id","params","per_page","lastPage","corsHandler","cors","origin","app","express","use","req","res","process","env","PHRASE_ACCESS_TOKEN","error","status","send","JSON","stringify","toString","accessToken","defaults","common","Authorization","interceptors","response","selectedProject","projectID","projects","find","getProject","PHRASE_PROJECT_ID","locale","localeCode","locales","firstData","push","getLocales","code","split","default","getLocale","query","file_format","tags","set","e","listen","PORT","console","log"],"mappings":"gcAGA,SAASA,EAAqBC,GAC5B,IACMC,EADQ,wCACWC,KAAKF,GAE9B,IAAKC,EAAY,UAAUE,MAAM,oDAEjC,OAAOC,SAASH,EAAW,IAG7BI,eAAeC,EAAkBC,EAAwBC,GACvD,IAAMC,KAAEA,EAAFC,QAAQA,SAAkBC,EAAMC,iDAAiDL,EAAQM,cAAc,CAC3GC,OAAQ,CACNN,KAAAA,EACAO,SAAU,OAGd,MAAO,CACLN,KAAAA,EACAO,SAAUjB,EAAoBW,EAAQV,geCjBpCiB,EAAcC,EAAK,CAAEC,OAAQ,MAE7BC,EAAMC,IACZD,EAAIE,IAAIL,GAERG,EAAIR,IAAI,uBAAwBP,MAAOkB,EAAKC,KAC1C,IAAIC,QAAQC,IAAIC,oBAET,CACL,IAAMC,EAAQ,IAAIzB,MAAM,wDAIxB,MAHAqB,EACGK,OAAO,KACPC,KAAKC,KAAKC,UAAU,CAAEJ,MAAOA,EAAMK,cAChCL,MCfkBM,EAAAA,EDSbT,QAAQC,IAAIC,oBCRzBhB,EAAMwB,SAASzB,QAAQ0B,OAAOC,uBAAyBH,EACvDvB,EAAM2B,aAAaC,SAASjB,IACzBiB,GAAaA,EACbX,IACC,GAAIA,EAAMW,UAAsC,MAA1BX,EAAMW,SAASV,OACnC,UAAU1B,MAAM,iFAGlB,MAAMyB,IDSV,IAAMY,uBEjB0BC,GAChC,IAAQhC,KAAMiC,SACN/B,EAAMC,IAAI,6CAEZL,EAAWkC,EAAaC,EAASC,KAAMpC,GAAYA,EAAQM,KAAO4B,GAAaC,EAAS,GAE9F,IAAKnC,EAAS,UAAUJ,MAAM,4IAE9B,OAAOI,EFSuBqC,CAAWnB,QAAQC,IAAImB,mBAC/CC,uBDkByBvC,EAAwBwC,EAAsCC,GAK7F,IAAIF,EAeJ,YApBuDC,IAAAA,GAA+B,GACjFC,IACHA,uBAhB8BzC,GAChC,IAAMyC,EAA0B,IAExBvC,KAAMwC,EAARjC,SAAmBA,SAAmBV,EAAiBC,EAAS,GACtEyC,EAAQE,QAAQD,GAEhB,IAAK,IAAIzC,EAAO,EAAGA,GAAQQ,EAAUR,IAAQ,CAC3C,IAAMC,KAAEA,SAAeH,EAAiBC,EAASC,GACjDwC,EAAQE,QAAQzC,GAGlB,OAAOuC,EAKWG,CAAW5C,IAIH,iBAAfwC,GACTD,EAASE,EAAQL,KAAKG,GAAUA,EAAOM,OAASL,MAI9CD,EAASE,EAAQL,KAAKG,GACHA,EAAOM,KAAKC,MAAM,KAAK,KACpBN,IAIxBD,EAASE,EAAQL,KAAKG,GAAUA,EAAOQ,UAGpCR,EAAQ,UAAU3C,MAAM,oEAE7B,OAAO2C,ECxCcS,CAAUf,EAAiBjB,EAAIiC,MAAMV,QAE1D,IACE,IAAMrC,KAAEA,SAAeE,EAAMC,iDAAiD4B,EAAgB3B,eAAciC,EAAOjC,eAAe,CAChIC,OAAQ,CACN2C,YAAa,cACbC,KAAMnC,EAAIiC,MAAME,QAIpBlC,EACGmC,IAAI,eAAgB,oBACpBA,IAAI,gBAAiB,gBACrB7B,KAAKC,KAAKC,UAAUvB,IACvB,MAAOmD,GAIP,MAHApC,EACGK,OAAO+B,EAAErB,SAASV,QAAU,KAC5BC,KAAKC,KAAKC,UAAU4B,EAAErB,SAAS9B,OAC5BmD,KAIVxC,EAAIyC,OAAOpC,QAAQC,IAAIoC,MAAQ,KAAM,IAAMC,QAAQC,IAAI"}